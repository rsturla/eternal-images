name: Build Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/build-iso.yml'
  schedule:
    - cron: "0 1,13 * * *" # 1am & 1pm every day
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-lumina:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        base-image: [silverblue]
        fedora-version: [39]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ""
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Optimize GHA Storage
        uses: rsturla/eternal-main/.github/actions/optimise-gha-storage@main

      - name: Setup Environment Variables
        run: |
          echo "IMAGE_NAME=eternal-linux/lumina-${{ matrix.base-image }}" >> $GITHUB_ENV

      - name: Generate Image Tags
        uses: rsturla/eternal-main/.github/actions/generate-image-tags@main
        id: generate-image-tags
        with:
          image-name: ${{ env.IMAGE_REGISTRY}}/${{ env.IMAGE_NAME }}
          major-version: ${{ matrix.fedora-version }}
          is-release: ${{ github.event_name != 'pull_request' }}

      - name: Login to GHCR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@2b51285047da1547ffb1b2203d8be4c0af6b1f20 # v3

      - name: Build Image
        id: build
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: lumina/.
          containerfiles: |
            lumina/Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-image-tags.outputs.tags }}
          build-args: |
            BASE_TAG=${{ matrix.fedora-version }}
            BASE_IMAGE=${{ matrix.base-image }}

      - name: Push Image
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sign Image
        uses: rsturla/eternal-main/.github/actions/sign-image@main
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          digest: ${{ steps.push.outputs.digest }}
          private-key: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY }}
          private-key-passphrase: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY_PASSPHRASE }}

      - name: Generate SBOM
        id: generate-sbom
        uses: rsturla/eternal-main/.github/actions/generate-sbom@main
        with:
          image-ref: ${{ steps.push.outputs.registry-path }}
          artifact-name: lumina-${{ matrix.fedora-version }}-sbom

      - name: Scan SBOM
        uses: rsturla/eternal-main/.github/actions/scan-sbom@main
        with:
          sbom-file: ${{ steps.generate-sbom.outputs.output-file }}
          artifact-name: lumina-${{ matrix.fedora-version }}-scan


  build-lumina-nvidia:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        base-image: [silverblue]
        fedora-version: [39]
        nvidia-version: [550]
        include:
          - nvidia-version: 550
            nvidia-is-stable: true
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ""
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Optimize GHA Storage
        uses: rsturla/eternal-main/.github/actions/optimise-gha-storage@main

      - name: Setup Environment Variables
        run: |
          echo "IMAGE_NAME=eternal-linux/lumina-${{ matrix.base-image }}" >> $GITHUB_ENV

      - name: Generate Image Tags
        uses: rsturla/eternal-main/.github/actions/generate-image-tags@main
        id: generate-image-tags
        with:
          image-name: ${{ env.IMAGE_REGISTRY}}/${{ env.IMAGE_NAME }}
          major-version: ${{ matrix.fedora-version }}
          is-release: ${{ github.event_name != 'pull_request' }}
          nvidia-driver-version: ${{ matrix.nvidia-version }}
          nvidia-driver-is-stable: ${{ matrix.nvidia-is-stable }}

      - name: Build Image
        id: build
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: lumina/.
          containerfiles: |
            lumina/Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-image-tags.outputs.tags }}
          build-args: |
            BASE_TAG=${{ matrix.fedora-version }}-nvidia${{ matrix.nvidia-version }}
            BASE_IMAGE=${{ matrix.base-image }}

      - name: Push Image
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sign Image
        uses: rsturla/eternal-main/.github/actions/sign-image@main
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          digest: ${{ steps.push.outputs.digest }}
          private-key: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY }}
          private-key-passphrase: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY_PASSPHRASE }}

      - name: Generate SBOM
        id: generate-sbom
        uses: rsturla/eternal-main/.github/actions/generate-sbom@main
        with:
          image-ref: ${{ steps.push.outputs.registry-path }}
          artifact-name: lumina-${{ matrix.fedora-version }}-nvidia${{ matrix.nvidia-version }}-sbom

      - name: Scan SBOM
        uses: rsturla/eternal-main/.github/actions/scan-sbom@main
        with:
          sbom-file: ${{ steps.generate-sbom.outputs.output-file }}
          artifact-name: lumina-${{ matrix.fedora-version }}-nvidia${{ matrix.nvidia-version }}-scan

  check:
    needs: [build-lumina, build-lumina-nvidia]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Check Job Status
        uses: rsturla/eternal-main/.github/actions/check-jobs-success@main
        with:
          jobs: ${{ toJSON(needs) }}
