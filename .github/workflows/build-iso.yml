name: Build ISO Files

on:
  workflow_dispatch:
    inputs:
      upload-to-r2:
        description: 'CloudFlare R2 storage'
        required: true
        type: boolean
  pull_request:
    paths:
      - '.github/workflows/build-iso.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}/eternal-linux
    strategy:
      fail-fast: false
      matrix:
        image: [lumina, lumina-kinoite]
        version: [39]
        arch: [x86_64]
        driver: ['', nvidia]
    steps:
      - name: Generate ISOs
        uses: jasonn3/build-container-installer@v1.2.0
        id: generate
        with:
          arch: ${{ matrix.arch }}
          image_repo: ${{ env.IMAGE_REGISTRY }}
          image_name: ${{ matrix.image }}
          variant: ${{ !contains(matrix.image, 'kinoite') && 'Silverblue' || 'Kinoite' }}
          version: ${{ matrix.version }}
          image_tag: ${{ matrix.version }}${{ matrix.driver && format('-{0}', matrix.driver) || '' }}
          secure_boot_key_url: 'https://github.com/rsturla/akmods/raw/main/_certs/public_key.der'
          enrollment_password: 'eternal'
          flatpak_remote_refs: app/org.mozilla.firefox/x86_64/stable app/org.videolan.VLC/x86_64/stable

      - name: Upload ISO (Job Artifact)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && !inputs.upload-to-r2)
        with:
          name: ${{ matrix.image }}-${{ matrix.version }}${{ matrix.driver && format('-{0}', matrix.driver) || '' }}
          path: ${{ steps.generate.outputs.iso_path }}
          if-no-files-found: error
          retention-days: 7
          compression-level: 0

      - name: Upload ISO (CloudFlare R2)
        if: (github.event_name == 'workflow_dispatch' && inputs.upload-to-r2)
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          R2_BUCKET_NAME: ${{ vars.R2_BUCKET_NAME }}
          R2_BUCKET_PREFIX: ${{ matrix.image }}
          SOURCE_DIR: ${{ steps.generate.outputs.iso_path }}
        run: |
          sudo -v ; curl https://rclone.org/install.sh | sudo bash
          rclone copy $SOURCE_DIR R2:$R2_BUCKET_NAME/$R2_BUCKET_PREFIX
