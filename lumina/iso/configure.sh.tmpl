#!/usr/bin/env bash

set -euo pipefail

IMAGE_NAME={{IMAGE_NAME}}
IMAGE_REF={{IMAGE_REF}}
SECUREBOOT_KEY_URL="https://github.com/rsturla/akmods/raw/refs/heads/main/_certs/public_key.der"
SECUREBOOT_ENROLLMENT_PASSWORD={{SECUREBOOT_ENROLLMENT_PASSWORD}}

# Detect desktop environment from session .desktop files
DESKTOP_ENVIRONMENT=""
_session_file="$(find /usr/share/wayland-sessions/ /usr/share/xsessions/ \
    -maxdepth 1 -type f -not -name '*gamescope*.desktop' -name '*.desktop' -printf '%f\n' -quit 2>/dev/null || true)"

case "$_session_file" in
    budgie*)   DESKTOP_ENVIRONMENT="budgie" ;;
    cosmic*)   DESKTOP_ENVIRONMENT="cosmic" ;;
    gnome*)    DESKTOP_ENVIRONMENT="gnome"  ;;
    plasma*)   DESKTOP_ENVIRONMENT="kde"    ;;
    sway*)     DESKTOP_ENVIRONMENT="sway"   ;;
    xfce*)     DESKTOP_ENVIRONMENT="xfce"   ;;
    cinnamon*) DESKTOP_ENVIRONMENT="cinnamon" ;;
    mate*)     DESKTOP_ENVIRONMENT="mate"   ;;
    *)
        echo "WARNING: No recognized desktop session found. Continuing without DE-specific setup."
        DESKTOP_ENVIRONMENT="unknown"
        ;;
esac
unset _session_file

# General system configuration
systemctl disable rpm-ostree-countme.service
systemctl disable bootloader-update.service
systemctl disable brew-upgrade.timer
systemctl disable brew-update.timer
systemctl disable brew-setup.service
systemctl disable rpm-ostreed-automatic.timer
systemctl disable setup-system-manager.service
systemctl disable flatpak-system-update.service
systemctl --global disable podman-auto-update.timer
systemctl --global disable setup-user-manager.service
systemctl --global disable flatpak-user-update.service

dnf install -y \
    anaconda-live \
    anaconda-webui \
    libblockdev-btrfs \
    libblockdev-lvm \
    libblockdev-dm \
    rsync

# Desktop-specific configuration block
DESKTOP_USER_INTERFACE_SETTINGS=""

case "$DESKTOP_ENVIRONMENT" in
    gnome)
        echo "Applying GNOME-specific configuration..."

        sed -i "s|^favorite-apps *=.*|favorite-apps = ['anaconda.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Ptyxis.desktop', 'org.mozilla.firefox.desktop']|" /etc/dconf/db/local.d/03-favorites
        rm -f /etc/xdg/autostart/org.gnome.Software.desktop

        tee /usr/share/gnome-shell/search-providers/org.gnome.Software-search-provider.ini > /dev/null <<EOF
DefaultDisabled=true
EOF

        glib-compile-schemas /usr/share/glib-2.0/schemas

        DESKTOP_USER_INTERFACE_SETTINGS=$(cat <<'EOF'
hidden_spokes =
    NetworkSpoke
    PasswordSpoke
    UserSpoke
hidden_webui_pages =
    anaconda-screen-accounts
EOF
)
        ;;

    kde)
        echo "Applying KDE-specific configuration..."
        # TODO: Add KDE-specific tweaks here
        ;;

    cosmic)
        echo "Applying COSMIC-specific configuration..."
        DESKTOP_USER_INTERFACE_SETTINGS=$(cat <<'EOF'
hidden_spokes =
    NetworkSpoke
    PasswordSpoke
    UserSpoke
hidden_webui_pages =
    anaconda-screen-accounts
EOF
)
        ;;

    budgie|xfce|mate|cinnamon|sway|unknown)
        echo "No specific configuration for '$DESKTOP_ENVIRONMENT' yet."
        ;;
esac

# Generate Anaconda profile configuration
tee /etc/anaconda/profile.d/eternal-liunx.conf > /dev/null <<EOF
# Anaconda configuration file for Eternal Linux

[Profile]
profile_id = eternal-linux

[Profile Detection]
os_id = eternal-linux

[Network]
default_on_boot = FIRST_WIRED_WITH_LINK

[Bootloader]
efi_dir = fedora
menu_auto_hide = True

[Storage]
default_scheme = BTRFS
btrfs_compression = zstd:1
default_partitioning =
    /     (min 1 GiB, max 70 GiB)
    /home (min 500 MiB, free 50 GiB)
    /var  (btrfs)

[User Interface]
custom_stylesheet = /usr/share/anaconda/pixmaps/silverblue/fedora-silverblue.css
${DESKTOP_USER_INTERFACE_SETTINGS}

[Localization]
use_geolocation = True
EOF

sed -i 's/^ID=.*/ID=eternal-linux/' /usr/lib/os-release
echo "Eternal Linux" > /etc/system-release
sed -i "s|^PRETTY_NAME=.*|PRETTY_NAME=\"Eternal Linux (${IMAGE_REF})\"|" /usr/lib/os-release

# Interactive Kickstart
tee -a /usr/share/anaconda/interactive-defaults.ks <<EOF
ostreecontainer --url=$IMAGE_REF --transport=containers-storage --no-signature-verification
%include /usr/share/anaconda/post-scripts/install-configure-upgrade.ks
%include /usr/share/anaconda/post-scripts/install-flatpaks.ks
%include /usr/share/anaconda/post-scripts/secureboot-enroll-key.ks
EOF

# Signed Images
tee /usr/share/anaconda/post-scripts/install-configure-upgrade.ks <<EOF
%post --erroronfail
bootc switch --mutate-in-place --enforce-container-sigpolicy --transport registry $IMAGE_REF
%end
EOF

# Install Flatpaks
tee /usr/share/anaconda/post-scripts/install-flatpaks.ks <<EOF
%post --erroronfail --nochroot
deployment="\$(ostree rev-parse --repo=/mnt/sysimage/ostree/repo ostree/0/1/0)"
target="/mnt/sysimage/ostree/deploy/default/deploy/\$deployment.0/var/lib/"
mkdir -p "\$target"
rsync -aAXUHKP /var/lib/flatpak "\$target"
%end
EOF

# Fetch the Secureboot Public Key
curl --retry 15 -Lo /etc/sb_pubkey.der "$SECUREBOOT_KEY_URL"

# Enroll Secureboot Key
tee /usr/share/anaconda/post-scripts/secureboot-enroll-key.ks <<EOF
%post --erroronfail --nochroot
set -oue pipefail

readonly ENROLLMENT_PASSWORD="$SECUREBOOT_ENROLLMENT_PASSWORD"
readonly SECUREBOOT_KEY="/etc/sb_pubkey.der"

if [[ ! -d "/sys/firmware/efi" ]]; then
    echo "EFI mode not detected. Skipping key enrollment."
    exit 0
fi

if [[ ! -f "\$SECUREBOOT_KEY" ]]; then
    echo "Secure boot key not provided: \$SECUREBOOT_KEY"
    exit 0
fi

mokutil --timeout -1 || :
echo -e "\$ENROLLMENT_PASSWORD\n\$ENROLLMENT_PASSWORD" | mokutil --import "\$SECUREBOOT_KEY" || :
%end
EOF
